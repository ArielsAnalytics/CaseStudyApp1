# AS 5/3/23
# Mastering Shiny: Case Study 2
# Creating an app showing injuries and related information

# libraries we need
library(shiny)
library(forcats)
library(dplyr)
library(ggplot2)
library(shinyWidgets)

# import data 
prodPath <- "https://raw.githubusercontent.com/hadley/mastering-shiny/main/neiss/products.tsv" 
products <- vroom::vroom(prodPath) 

injpath <- "https://raw.githubusercontent.com/hadley/mastering-shiny/main/neiss/injuries.tsv.gz"
injuries <- vroom::vroom(injpath)

poppath <- "https://raw.githubusercontent.com/hadley/mastering-shiny/main/neiss/population.tsv"
population <- vroom::vroom(poppath)

# if injuries does not exist..read next dataset
if (!exists("injuries")) {
  injuries <- vroom::vroom("injuries.tsv.gz")
  products <- vroom::vroom("products.tsv")
  population <- vroom::vroom("population.tsv")
}

# have table out lump together all other rows after the first 5 (to make more tidy)
# this code could have been in server or top like where it is here
count_top <- function(df, var, n = 5) {
  df %>%
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
    group_by({{ var }}) %>%
    summarise(n = as.integer(sum(weight)))
}

# code to get products for filtering 
prod_codes <- setNames(products$prod_code, products$title)

# start UI 
ui <- fluidPage(
  setBackgroundColor(
    color = "lightpink"), 
  fluidRow(
    # user inputs product
    column(8, selectInput("code", "Product",
                          choices = setNames(products$prod_code, products$title),
                          width = "100%")
    ),
    # user inputs number of rows they want
    column(2, numericInput("rows", "Number of Rows",
                           min = 1, max = 10, value = 5)),
    # user inputs if they want rate or count
    column(2, selectInput("y", "Y Axis", c("rate", "count")))
  ),
  # defines output tables 
  fluidRow(
    column(4, tableOutput("diag")),
    column(4, tableOutput("body_part")),
    column(4, tableOutput("location"))
  ),
  # defines output plot
  fluidRow(
    column(12, plotOutput("age_sex"))
  ),
  #  has user flip through stories
  fluidRow(
    column(2, actionButton("story", "Tell me a story")),
    column(10, textOutput("narrative"))
  )
)


server <- function(input, output, session) {
  # reactive to select product code
  selected <- reactive(injuries %>% filter(prod_code == input$code))
  
  # Find the maximum possible of rows.
  max_no_rows <- reactive(
    max(length(unique(selected()$diag)),
        length(unique(selected()$body_part)),
        length(unique(selected()$location)))
  )
  
  # Update max value for the numericInput based on max_no_rows().
  observeEvent(input$code, {
    updateNumericInput(session, "rows", max = max_no_rows())
  })
  # number of rows to show
  table_rows <- reactive(input$rows - 1)
  
  # output tables
  output$diag <- renderTable(
    count_top(selected(), diag, n = table_rows()), width = "100%")
  
  output$body_part <- renderTable(
    count_top(selected(), body_part, n = table_rows()), width = "100%")
  
  output$location <- renderTable(
    count_top(selected(), location, n = table_rows()), width = "100%")
  
  summary <- reactive({
    selected() %>%
      count(age, sex, wt = weight) %>%
      left_join(population, by = c("age", "sex")) %>%
      mutate(rate = n / population * 1e4)
  })
  # plots age/sex as rate or count 
  output$age_sex <- renderPlot({
    if (input$y == "count") {
      summary() %>%
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries") +
        theme_grey(15)
    } else {
      summary() %>%
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people") +
        theme_grey(15)
    }
  })
  # narrative info
  output$narrative <- renderText({
    input$story
    selected() %>% pull(narrative) %>% sample(1)
  })
}

shinyApp(ui, server)
